apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongo-sfs
spec:
  selector:
    matchLabels:
      app: mongo
  serviceName: mongo-svc
  replicas: 1
  template:
    metadata:
      labels:
        app: mongo
    spec:
      containers:
      - name: mongo
        image: mongo:6.0
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: "700Mi"
            cpu: "750m"
        ports:
        - containerPort: 27017
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: MONGO_INITDB_ROOT_USERNAME
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongo-secret
              key: MONGO_INITDB_ROOT_PASSWORD
        - name: MONGO_INITDB_DATABASE
          valueFrom:
            configMapKeyRef:
              name: mongo-config
              key: MONGO_INITDB_DATABASE
        livenessProbe:
          exec:
            command:
              - mongosh
              - --eval
              - "db.runCommand({ ping: 1 })"
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
              - mongosh
              - --eval
              - "db.runCommand({ ping: 1 })"
          initialDelaySeconds: 30
          periodSeconds: 5
          failureThreshold: 3
        volumeMounts: 
          - name: mongo-storage
            mountPath: /data/db
  volumeClaimTemplates:
  - metadata: 
      name: mongo-storage
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi
      storageClassName: aws-ebs 
---
apiVersion: v1
kind: Service
metadata:
  name: mongo-svc
spec:
  clusterIP: none
  selector:
    app: mongo
  ports:
  - port: 27017
    targetPort: 27017